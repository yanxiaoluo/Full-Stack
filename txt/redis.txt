是什么
    一个高性能的(key/value)分布式内存数据库，基于内存运行
    - 支持数据的持久化，可以将内存中的数据保持在磁盘中，重启的时候可以再次加载进行使用
    - 不仅支持简单的key-value类型数据，还提供list、set、zset、hash等数据结构的存储
    - 支持数据的备份，即master-slave模式的数据备份

能干嘛
    - 内存存储和持久化：Redis支持异步将内存中的数据写到硬盘上，同事不影响继续服务
    - 取最新N个数据的操作，如：可以将最新的10条评论的ID放在Redis的list集合里面
    - 模拟类似于HttpSession这种需要设定过期时间的功能
    - 发布、订阅消息系统
    - 定时器、计数器

去哪下
    nodejs中npm install redis

怎么玩
    ps -ef|grep redis   查看Redis服务进程信息
    redis-cli -p 6639   启动Redis服务器
    SHUTDOWN            关掉Redis进程
    select [index]      切换数据库,16个库，从0-15
    Dbsize              查看当前数据库的key的数量
    Flushdb             清空当前库
    FLUSHALL            通杀全部库

    统一密码管理，16个库都是同样密码，端口默认是6397

数据类型
    String  字符串
    Hash    哈希，类似Java的map
    List    简单的字符串列表，按照插入顺序排序，可以添加一个元素导列表的头部（左边）或者尾部（右边），底层实际是个链表
    Set     是string类型的无序集合，通过HashTable实现
    Zset(sorted set：有序集合)
        - 和set一样也是string类型元素的集合，且不允许重复的成员
        - 不同的是每个元素都会关联一个double类型的分数
        - Redis正式通过分数来为集合中的成员进行从小到大的排序
        - zset成员是唯一的，但分数(score)却可以重复

        
    keys *               查看所有key
    exists key           判断某个key是否存在
    move key [dbindex]   当前库没有了，被移除了
    set/get/del/append/strlen key              设置、获取、删除、值后添加、长度
    expire key           为给定的key设置过去事件
    ttl key              查看还有多少秒过期，-1永不过期，-2已过期
    type key             查看key的类型

String
    incr/decr/incrby/decrby     必须是数字，单路递增、递减/多路递增、递减
    getrange [key]/[key key]    获取指定区间范围内的值，类似between……and的关系
    setrange [value]            设置指定区间范围内的值
    setex(set with expire) [key] [s] [value]    设置key的过期时间
    setnx(set if not exist) [key] [value]       如果不存在就设置,返回1生效，0不生效
    mset/mget/msetnx [key] [value] [key] [value]……           设置、获取多个

List
    LPUSH/RPUSH/LRANGE [list] [v] [v] [v]/[index] [index]   左/右添加/查看
    lpop/rpop   左/右删除
    LINDEX      [list] [index]  按照索引获取元素
    LLEN        获取长度
    LREM [list] [howmany] [value]        删除N个value
    LTRIM       开始index结束index，截取指定范围的值后再赋值给key
    RPOPLPUSH [list] [list]     把list的底部添加到list的顶部
     
Hash(键值对)
    hset/hget/hmset/hmget/hgetall/hdel [hash] [key] [v]
    hlen
    hexists [hash] [key]    判断是否存在某个key，返回1或0
    hkeys/hvals [hash]      获取所有key或者value
    hincreby/hincrebyfloat [hash] [key] [要增加的数/小数]
    hsetnx [hash] [key] [v]          如果不存在就设置,返回1生效，0不生效



Set(无序无重复)
    sadd/smembers/sismember [set]     添加 [vs]/获取 [i] [i]/判断    set1 1 1 2 2 3 3/set1 0 -1/set1 1
    scard                             获取集合里面的元素个数
    srem [key] [v]                    删除集合中元素
    srandmember [key]                 随机出几个数
    spop [key]                        随机出栈
    smove [key1] [key2]               将key1的值赋给key2

    sdiff   差集    在第一个set里面而不再后面任何一个set里面的项
    sinter  交集
    sunion  并集

Zset
    zadd [zset] [score] [value]               添加
    zrange [zset] [score] [value] withscores  获取

    zrangebyscore [zset] [开始score] [结束score]    获取分数范围内的key值
        - withscores
        - ( 符号代表不包含  [zset] 60 (90
        - limit 返回限制    [zset] 60 90 limit 2 2

    zrem [key] [v]          某score下对应的value值，删除元素
    zcard/zcount [key]      统计个数/统计区间的个数 [zset] 60 80
    zrank [key] [value]     获得下标值  
    zscore [zset] [key]     对应值的分数
    zrevank [key] [value]   逆序获取下标值
    zrevrangebyscore [结束分数] [开始分数]

配置位置
    vim /myredis/redis.conf
如何触发rdb快照
    - 配置文件中默认的快照配置
        - 冷拷贝后重新使用，可以cp dump.rdb dump_new.rdb
        - 命令save或者是bgsave
            - save时只管保存，其它不管，全部阻塞
            - bgsave redis会在后台异步进行快照操作，快照同事还可以相应客户端请求，可以通过lastsave命令获取最后一次成功执行快照的时间
        - 执行flushall命令也会产生dump.rdb文件，但里面是空的，没有意义
        - 如何恢复
            - 将备份文件移动到redis安装目录并启动服务即可
            - CONFIG GET dir获取目录
        - 优势
            - 适合大规模的数据恢复
            - 对数据完整性和一致性要求不高
        - 劣势
            - 在一定间隔时间做一次备份，所以如果redis意外down掉的话，就会丢失最后一次快照后的所有修改
            - fork的时候，内存中的数据被克隆了一份，大致2倍的膨胀性需要考虑
        - 如何停止
            动态所有停止rdb保存规则的方法：redis-cli config set save ""

持久化
    - RDB(Redis database)
        - 在指定时间间隔内将内存中的数据集快照写入磁盘，行话讲snapshot，它恢复时是将快照文件直接读到内存里
        - Redis会单独创建(fork)一个子进程来进行持久化，会先将数据写入到一个临时文件中，待持久化过程都结束了，再用这个临时文件替换上次持久化好的文件
        - 如果需要进行大规模数据的恢复，且对于数据恢复完整性不敏感，那么RDB比AOF更加高效，RDB的缺点是最后一次持久化后的数据可能丢失
        - fork
            - 复制一个与当前进程一样的进程，新进程的所有数据(变量、环境变量、程序计数器等)数值都和原进程一致，但是是一个全新的进程，并作为原进程的子进程
        - RDB保存的是dump.rdb文件
        - 配置位置
        - snapshot快照
            - save命令秒钟写操作次数
                - RDB是整个内存的压缩过的snapshot，RDB的数据结构，可以配置复合的快照触发条件，默认
                    是1分钟内改了1万次
                    或5分钟内改了10次
                    或15分钟内改了1次
                - 如果想禁用RDB持久化的策略，只要不设置任何save指令，或者给save传入一个空字符串参数也可以

            - stop-writes-on-bgsave-error   如果配置成no，标识不在乎数据不一致或者有其他的手段发现和控制
            - rdbcompression    对于存储到磁盘中的快照，可以设置是否进行压缩存储，如果是的话，redis会采用LAF算法进行压缩，如果不想消耗CPU来压缩可以设置为no关闭此功能
            - rdbchecksum   在存储快照后，还可以让redis使用CRC64算法来进行数据校验，但是这样做会增加大约10%的性能消耗，如果希望获取到最大的性能提升，可以关闭此功能
            - dbfilename    dump.rdb
            - dir   config get dir获得

    - AOF(append only file)


Redis的事务(部分支持)
    - 一个队列中，一次性、顺序性、排他性的执行一系列命令
    - 常用命令
        discard     取消事务，放弃执行事务块内的所有命令
        exec        执行所有事务块内的命令
        multi       标记一个事务块的开始
        unwatch     取消watch命令对所有key的监事
        watch key   监视一个或多个key，如果在事务执行之前这个key被其他命令所改动，那么事务将被打断
    - 全体连坐      命令错了一个那么全部不能执行
    - 冤头债主      命令没错但是不支持那么部分执行
    - watch监控
        悲观锁(pessimistic lock)
            每次拿数据的时候都认为别人会修改，所以每次拿数据都会上锁
        乐观锁
            每次拿数据的时候都认为别人不会修改，所以不会上锁
            但是在更新的时候回判断一下在此期间有没有别人去更新这个数据，可以使用版本号等级制
            适用于多读的应用类型，可以提供吞吐量
            乐观锁策略：提交版本必须大于记录当前版本才能执行更新
        CAS(check and set)

Redis的发布订阅
    - 进程间的一种消息通信模式：发送者(pub)发送消息，订阅者(sub)接收消息
    - 命令
        - SUBSCRIBE c1 c2 c3        一次性订阅多个
        - PUBLISH c2 hello-redis    消息发布
        - PUBSCRIBE new*            订阅多个，通配符*
        - PUBLISH new1 redis2015    收取消息
        
Redis的主从复制
    - 主机数据更新后根据配置和策略，自动同步到备机的master/slave机制，master以写为主，slave以读为主
    - 读写分离、容灾恢复
    - 配从不配主
    - 从库配置：slaveof 主库IP 主库端口
        - 每次与master断开之后，都需要重新连接，除非配置进redis.conf文件
        - Info replication
    - 修改配置文件细节操作
        - 拷贝多个redis.conf文件
        - 开启daemonize yes
        - Pid文件名字
        - 指定端口
        - Log文件名字
        - Dump.rdb名字
    - 常用3招
        - 一主二仆：一个master两个slave
        - 薪火相传
            - 上一个slave可以是下一个slave的master，slave同样可以接收其他slaves的连接和同步请求，那么该slave作为了链条中下一个的master，可以有效减轻master的写压力
            - 中途变更专项会清除之前的数据，重新建立拷贝最新的
            - slaveof 新主库IP 新主库端口
        - 反客为主：SLAVEOF no one使当前数据库停止与其他数据库的同步，转成主数据库
    - 复制原理
        - slave启动成功连接到master后会发送一个sync命令
        - master接到命令启动后台的存盘进程，同时收集所有接收到的用于修改数据集命令，在后台进程执行完毕之后，master将传送整个数据文件到slave，以完成一次完全同步
        - 全量复制：slave服务在接收到数据库文件数据后，将其存盘并加载到内存中
        - 增量复制：master继续将新的所有收集到的修改命令依次传给slave，完成同步
        - 但是只要是重新连接master，一次完全同步（全量复制）将被自动执行
    - 哨兵模式
        - 反客为主的自动版，能改后台监控主机是否故障，如果故障了根据投票数自动将从库转换为主库
        - 步骤
            - 调整结构，6379带着80、81
            - 自定义的/myredis目录下新建sentinel.conf文件，名字不能错
            - 配置哨兵，填写内容
                - sentinel monitor host6379 1
                - 最后一个数字1表示主机挂掉后slave投票看让谁接替称为主句，得票数多少后称为主机
            - 启动哨兵
                - Redis-sentinel /myredis/sentinel.conf
            - 投票新选
            - 重新主从继续开工，info replication查看
        - 一组sentinel能同时监控多个master
    - 复制延时
        由于所有的写操作都是先在master上操作，然后同步更新到slave上，所以从master同步到slave机器有一定的延迟，当系统很繁忙的时候，延迟问题会更加严重，slave机器数量的增加也会使这个问题更加严重