普通函数this指向如何改变
1、局部变量代替this指针
    let _this = this
2、使用call或者apply或者bind

Web Worker 有以下几个使用注意点。

（1）同源限制
分配给 Worker 线程运行的脚本文件，必须与主线程的脚本文件同源。

（2）DOM 限制
Worker 线程所在的全局对象，与主线程不一样，无法读取主线程所在网页的 DOM 对象，也无法使用document、window、parent这些对象。但是，Worker 线程可以navigator对象和location对象。

（3）通信联系
Worker 线程和主线程不在同一个上下文环境，它们不能直接通信，必须通过消息完成。

（4）脚本限制
Worker 线程不能执行alert()方法和confirm()方法，但可以使用 XMLHttpRequest 对象发出 AJAX 请求。

（5）文件限制
Worker 线程无法读取本地文件，即不能打开本机的文件系统（file://），它所加载的脚本，必须来自网络。


箭头函数：箭头函数本身是没有this和arguments的，在箭头函数中引用this实际上是调用的是定义时的上一层作用域的this。
这里强调的是上一层作用域，是因为对象是不能形成独立的作用域的。

CSS伪元素是用来添加一些选择器的特殊效果。
CSS伪类是用来添加一些选择器的特殊效果。

盒模型分为w3c模型和ie盒模型
1、w3c  content（height，width）、padding、border、margin
2、IE   content、padding、border（height，width）、margin
3、box-sizing
    content-box	宽度和高度不包括边框和填充
    border-box	宽度和高度包括边框和填充
4、dom.getBoundingClientRect().width/height
　　这种方式是根据元素在视窗中的绝对位置来获取宽高的

   dom.offsetWidth/offsetHeight
　　这个就没什么好说的了，最常用的，也是兼容最好的。
5、边距重叠解决方案(BFC)
    BFC的原理
        内部的box会在垂直方向，一个接一个的放置
        每个元素的margin box的左边，与包含块border box的左边相接触（对于从做往右的格式化，否则相反）
        box垂直方向的距离由margin决定，属于同一个bfc的两个相邻box的margin会发生重叠
        bfc的区域不会与浮动区域的box重叠
        bfc是一个页面上的独立的容器，外面的元素不会影响bfc里的元素，反过来，里面的也不会影响外面的
        计算bfc高度的时候，浮动元素也会参与计算
    怎么取创建bfc
        float属性不为none（脱离文档流）
        position为absolute或fixed
        display为inline-block,table-cell,table-caption,flex,inine-flex
        overflow不为visible
        根元素
    应用场景
        自适应两栏布局
        清除内部浮动 
        防止垂直margin重叠

box-sizing的应用场景。
3.说一下你了解的弹性FLEX布局.
    主要思想是给予容器控制内部元素高度和宽度的能力
    容器拥有两根隐形的轴，水平的主轴（main axis），和竖直的交叉轴
    flex-direction　　　　决定主轴的方向
    flex-wrap　　　　     决定当排列不下时是否换行以及换行的方式
    flex-flow         　　是flex-direction和flex-wrap的简写形式
    justify-content 　　　决定item在主轴上的对齐方式
    align-items          决定了item在交叉轴上的对齐方式
    align-content     　　该属性定义了当有多根主轴时，即item不止一行时，多行在交叉轴轴上的对齐方式
                          当有多行时，定义了align-content后，align-items属性将失效
    align-self           允许item有自己独特的在交叉轴上的对齐方式
4.说一下一个未知宽高元素怎么上下左右垂直居中。
    子元素绝对定位，距离顶部 50%，左边50%，然后使用css3 transform:translate(-50%; -50%)，不支持IE9以下不支持transform属性
    position+transform
        position: absolute;
        top: 50%;
        left: 50%;
        -webkit-transform: translate(-50%, -50%);
        transform: translate(-50%, -50%);

    flex
        display: flex;
        align-items: center;
        justify-content: center;

    absolute+margin
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        margin: auto;

5.说一下原型、原型链、对象、构造函数之间的一些联系。
    对象：无序属性的集合，其属性可以包含基本值，对象和函数。无非就是一组名值对，其中值可以是数据或函数。
    构造函数是特定类型的对象，每个构造函数都有一个原型对象，原型对象都包含一个指向构造函数的指针，而实例都包含一个指向原型对象的内部指针。
    我们创建的每个函数都有一个prototype（原型）属性，这个属性是一个指针，指向一个对象    
    原型链：ES将原型链作为实现继承的主要方法，基本思想是利用原型让一个引用类型继承另一个引用类型
6.DOM事件的绑定的几种方式
7.说一下你项目中用到的技术栈，以及觉得得意和出色的点，以及让你头疼的点，怎么解决的。
8.有没有了解http2.0,websocket,https，说一下你的理解以及你所了解的特性。
    HTTP1.0 每建立一次TCP连接，只提供一次 request 请求和 response 请求，一次请求结束后，自动断开TCP连接
    HTTP1.0只有GET POST和HEAD方法
    弊端：连接无法复用，每次请求都要经历三次握手和慢启动
    

    HTTP1.1 支持持续长连接(Response Headers头中出现Connection:keep-alive)，添加了请求流水线串行化单线程处理可以同时在一个TCP连接上发送多个请求
    HTTP1.1增加5个新的方法：OPTIONS，PUT，DELETE，TRACE和CONNEC
    弊端：只有响应是有顺序的，只有上一个请求完成后，下一个才能响应，并且后续任务仍然受到头部阻塞的影响

    HTTP2.0  采用多路复用，与HTTP/1.1语义完全兼容的基础上，进一步减少了网络延迟和传输的安全性
    支持明文传输，消息头压缩，二进制分帧(在应用层http和传输层tcp/udp之间增加一个二进制分帧层，解决Http1.1性能限制，改进传输性能，实现低延迟和高吞吐量)

    多路复用好处
        减少服务端连接压力，减少占用内存，提升连接吞吐量
        连接数的减少改善网络阻塞情况，慢启动时间减少，阻塞和丢包回复速度更快
        避免频繁创建和关闭（三次连接、四次挥手）

    WebSocket是HTML5中的协议，本质上是基于TCP，先通过HTTP/HTTPS协议发起一条特殊HTTP请求进行握手后创建一个用于交换数据的TCP连接，也是支持长连接的。
    WebSocket是由HTTP先发起的，然后在转为WebSocket。
    当然在HTML5规范下还有SSE（Server-Sent Events，服务器推送事件）这种方式比长轮询（Long Polling)更高效，需要使用EventSource对象。
    WebSocket优势：浏览器和服务器只需要做一个握手的动作，在建立连接之后，双方可以互相推送消息。

    总结：HTTP1.1使用Connection:keep-alive进行长连接，并不是永久保持连接，只是维持一段时间。
    WebSocket是真正实现长连接、全双工的通信。如果你的浏览器支持HTTP2.0可以点击这个连接就可以体验到HTTP/1.1与HTTP/2在图片加载的速度上的明显不同

    SSE与WebSocket区别
        WebSocket是全双工通信，可以双向通信，功能更强；SSE是单向通信，只能服务器想浏览器推送。
        SSE是一个轻量级协议，相对简单；WebSocket是一种较重的协议，相对复杂
        SSE默认支持断线重连，WebSocket则需要额外部署
        SSE支持自定义发送数据类型

    HTTPS特点基于HTTP协议，通过SSL或TLS提供加密处理数据、验证对方身份以及数据完整性保护
        1.内容加密：采用混合加密技术，中间者无法直接查看明文内容
        2.验证身份：通过证书认证客户端访问的是自己的服务器
        3.保护数据完整性：防止传输的内容被中间人冒充或者篡改

1.webpack的入口文件怎么配置，多个入口怎么分割
    moudule.exports = {
        mode: development,
        entry: '',
        output: {
            path:'',
            filename:''
        },
        devserver:
    }
    多个入口
    entry: {
        index: '文件地址',
        text: '文件地址'
    }


2.Babel插件：transform-runtime以及stage-2，你说一下他们的作用。

    babel 编译时只转换语法，几乎可以编译所有时新的 JavaScript 语法，但并不会转化BOM里面不兼容的API

    比如 Promise,Set,Symbol,Array.from,async 等等的一些API这时候就需要 polyfill 来转转化这些API
    babel 转译语法需要一些plugin

    stage 系列集合了一些对 es7 的草案支持的插件
        * stage-0 - Strawman: just an idea, possible Babel plugin.
        * stage-1 - Proposal: this is worth working on.
        * stage-2 - Draft: initial spec.
        * stage-3 - Candidate: complete spec and initial browser implementations.
        * stage-4 - Finished: will be added to the next yearly release.
        stage 是向下兼容 0>1>2>3>4 所包含的插件数量依次减少

    runtime转换器插件主要做了三件事:
        * 当你使用generators/async方法、函数时自动调用babel-runtime/regenerator
        * 当你使用ES6 的Map或者内置的东西时自动调用babel-runtime/core-js
        * 移除内联babel helpers并替换使用babel-runtime/helpers来替换

    transform-runtime优点
    *不会污染全局变量 * 多次使用只会打包一次 * 依赖统一按需引入,无重复引入,无多余引入

    transform-runtime缺点
    *不支持实例化的方法Array.includes(x) 就不能转化
    * 如果使用的API用的次数不是很多，那么transform-runtime 引入polyfill的包会比不是transform-runtime 时大
    总的来说一句话，你可以使用内置的一些东西例如Promise,Set,Symbol等，就像使用无缝的使用polyfill,来使用babel 特性，并且无全局污染、极高代码库适用性。
    虽然这种方法的优点是不会污染全局，但是，实例的方法，Array.prototype.includes();

babel-polyfill
babel-polyfill则是通过改写全局prototype的方式实现，比较适合单独运行的项目。开启babel-polyfill的方式，可以直接在代码中require，或者在webpack的entry中添加，也可以在babel的env中设置useBuildins为true来开启。但是babel-polyfill会有近100K，打包后代码冗余量比较大，对于现代的浏览器,有些不需要polyfill，造成流量浪费污染了全局对象

3.我看到你的webpack配置用到webpack.optimize.UglifyJsPlugin这个插件，有没有觉得压缩速度很慢，有什么办法提升速度。
这个我主要回答了一下，我之前也没怎么了解，一个想到是缓存原理，压缩只重新压缩改变的，还有就是减少冗余的代码，压缩只用于生产阶段，然后面试官问还有呢？我就说，还可以从硬件上提升，可以得到质的飞跃，比如换台I9处理器的电脑。。。。

4.简历上看见你了解http协议。说一下200和304的理解和区别
这个噼里啪啦说了一堆，协商缓存和强制缓存的区别，流程，还有一些细节，提到了expires,Cache-Control,If-none-match,Etag,last-Modified的匹配和特征，这一块之前有过比较详细的了解，所以还是应答如流。

5.DOM事件中target和currentTarget的区别
target是一个触发事件的对象的引用， 当事件处理程序在事件的冒泡或捕获阶段被调用时。标识事件发生的元素。
currentTarget指的是当事件遍历DOM时，标识事件的当前目标。它总是引用事件处理程序附加到的元素

6.说一下你平时怎么解决跨域的。以及后续JSONP的原理和实现以及cors怎么设置。
我就说了一下Jason和cors,然后问我JSONP的原理以及cors怎么设置，这一块自己也实践过，所以还是对答如流的。

7.说一下深拷贝的实现原理。
JSON.stringify和JSON.parse的实现
递归

8.说一下项目中觉得可以改进的地方以及做的很优秀的地方？

1.有没有自己写过webpack的loader,他的原理以及啥的，记得也不太清楚。

2.有没有去研究webpack的一些原理和机制，怎么实现的。

3.babel把ES6转成ES5或者ES3之类的原理是什么，有没有去研究。

4.git大型项目的团队合作，以及持续集成啥的。

5.什么是函数柯里化？以及说一下JS的API有哪些应用到了函数柯里化的实现？

6.ES6的箭头函数this问题，以及拓展运算符。

7.JS模块化Commonjs,UMD,CMD规范的了解，以及ES6的模块化跟其他几种的区别，以及出现的意义。

8.说一下Vue实现双向数据绑定的原理，以及vue.js和react.js异同点，如果让你选框架，你怎么怎么权衡这两个框架，分析一下。

9.我看你也写博客，说一下草稿的交互细节以及实现原理。

1.先自我介绍一下，说一下项目的技术栈，以及项目中遇到的一些问题啥的。

2.一个业务场景，面对产品不断迭代，以及需求的变动该怎么应对，具体技术方案实现。具体业务场景，我就不一一描述，Boss在白板上画了一个大致的模块图，然后做了一些需求描述。然后需求一层一层的改变，然后往下挖，主要是考察应对产品能力，以及对代码的可维护性和可拓展性这些考察，开放性问题，我觉得还考察一些沟通交流方面的能力，因为有些地方面试官故意说得很含糊，反正就是一个综合能力，以及对产品的理解，中间谈到怎么实现，也问到了一些具体的点，记得问到的有一下几个。

① 怎么获取一个元素到视图顶部的距离。
    document.documentElement.scrollTop //firefox
    document.documentElement.scrollLeft //firefox

    document.body.scrollTop //IE
    document.body.scrollLeft //IE

    obj.offsetTop //IE firefox
    obj.offsetLeft //IE firefox

    scrollWidth  
    是对象的实际内容的宽，不包边线宽度，会随对象中内容的多少改变（内容多了可能会改变对象的实际宽度）。 
    clientWidth
    是对象可见的宽度，不包滚动条等边线，会随窗口的显示大小改变。  
    offsetWidth  
    是对象的可见宽度，包滚动条等边线，会随窗口的显示大小改变。 

② getBoundingClientRect获取的top和offsetTop获取的top区别
    获取屏幕宽高：
        由于body有8pxmargin，用body偏小
        网页可见区域宽： document.body.clientWidth (不包括边线的宽)
        网页可见区域高： document.body.offsetWidth (包括边线的高)
        可以用documentElement，指的是html的
        document.documentElement.clientWidth
        document.documentElement.clientHeight
        由于两者都存在兼容问题，所以兼容写法：
        var w = document.documentElement.clientWidth ||document.body.clientWidth;
        var h = document.documentElement.clientHeight || document.body.clientHeight;	
    屏幕滚动宽高:
        网页正文宽： document.body.scrollWidth
        网页正文高： document.body.scrollHeight
        网页被卷去的高： document.body.scrollTop
        网页被卷去的左： document.body.scrollLeft
        兼容写法：var scrollTop=document.documentElement.srollTop||document.body.scrollTop;

        **下面介绍：div.getBoundingClientRect()**
        它的返回值为：{top:xxx, right:xxx, bottom:xxx, left:xxx width:xxx,height:xxx} 
        分别表示div的上右下左距文档（不是可视文档)左边上边距离
        注意了：元素设置定位时多返回两个值x y，他们的值分别等于x=left y=top
        
        注意点：
            left和top都是DOM对象的属性，获取时有单位
            x，y都是鼠标事件对象的属性，获取时无单位

③ 事件委托
    事件委托就是利用事件冒泡，只指定一个事件处理程序，就可以管理某一类型的所有事件
    委托父级代为执行事件

1.业务场景：比如说百度的一个服务不想让阿里使用，如果识别到是阿里的请求，然后跳转到404或者拒绝服务之类的？

2.二分查找的时间复杂度怎么求，是多少

3.XSS是什么，攻击原理，怎么预防。
    即跨站脚本攻击，它是 Web 程序中常见的漏洞。
    原理是攻击者往 Web 页面里插入恶意的脚本代码（css 代码、Javascript 代码等），当用户浏览该页面时，嵌入其中的脚本代码会被执行，从而达到恶意攻击用户的目的，如盗取用户 cookie、破坏页面结构、重定向到其他网站等。

    预防一：对于评论、文章内容等做转码操作
    预防二：对表单内容做长度校验

4.线性顺序存储结构和链式存储结构有什么区别？以及优缺点。

5.分析一下移动端日历，PC端日历以及桌面日历的一些不同和需要注意的地方。

6.白板写代码，用最简洁的代码实现数组去重。

7.怎么实现草稿，多终端同步，以及冲突问题？