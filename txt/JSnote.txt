基本数据（值）类型
string      任意字符串
number      任意数字
boolean     true、false
undefined   undefined
null        null

引用数据类型
object      任意对象
function    一种特别的对象（可执行）
array       一种特别的对象（数值下标，内部数据是有序的）

判断类型
typeof
    可以判断undefined、数值、字符串、布尔值、function
    不能判断null与object、object与array
instanceof
    判断对象的具体类型
===
    判断undefined、null

null和undefined的区别
    undefined声明了没有值
    null声明了且值为null

----------------------------------------------------------------------------------

什么是数据
    存储在内存中代表特定信息的‘东西’，本质上是0101...（二进制数据）

什么是内存
    内存条通电后产生的可存储数据的空间（临时的）
    内存产生和死亡——内存条（电路板）- 通电 - 产生内存空间 - 存储数据 - 处理数据 - 断电 - 内存空间和数据消失

----------------------------------------------------------------------------------

多进程：一个应用程序可以同时启动多个实例运行
    优点 - 能有效提升CPU的利用率
    缺点 - 创建多线程开销、线程间切换开销、死锁与状态同步问题
多线程：在一个进程内，同时有多个线程运行
    优点 - 顺序编程简单易懂
    缺点 - 效率低

----------------------------------------------------------------------------------

全局执行上下文
    - 确定全局执行上下文为window
    - 对全局数据进行预处理
        var定义的全局变量===>undefined，添加为window的属性
        function声明的全局函数===>赋值(fun)，添加为window的方法
        this===>赋值(window)
    - 开始执行全局代码

函数执行上下文
    - 在调用函数准备执行函数体之前，创建对应的函数执行上下文对象(虚拟的，存在于栈中)
    - 对局部数据进行预处理
        形参变量==>赋值(实参)==>添加为执行上下文的属性
        arguments==>赋值(实参列表)，添加为执行上下文的属性
        var定义的局部变量===>undefined，添加为执行上下文的属性
        function生命的函数===>赋值(fun)，添加为执行上下文的方法
        this===>赋值(调用函数的对象)
    - 开始执行函数体代码

----------------------------------------------------------------------------------

软件工作重要原则之一
    - 高内聚
        一个应用内，多个模块以及它内部的多个元素联系紧密，可以共同完成一个核心的任务
    - 低耦合
        模块以及它的内部元素之间的依赖很松散
        达成低耦合的过程叫解耦

JS设计模式——观察者模式
    - 低耦合的设计模式
    - 也称为发布-订阅模式
        多个订阅者之间相互独立完成各自的业务

    