其它:
event.srcElement = event.target     目标元素    兼容关系

Array.prototype.find = Array.prototype.find || function (item) {
    for () {
        if (this[i] == item) {
            return true
        }
    }
    return null
}

使用String()函数做强制类型转换时
    对于Number和Boolean实际上就是调用toString()方法
    对于null和undefined是直接转换成"null""undefined"

使用Number()函数
    - 字符串--->数字
        如果是纯数字的字符串，直接转数字        "123"=>123
        如果字符串有非数字的内容，转NaN         "abc"=>NaN
        如果字符串是一个空串或者全是空格，转0   ""=>0   "     "=>0
    - 布尔--->数字
        true=>1
        false=>0
    - Null=>0
    - undefined=>NaN
    - parseInt()、parseFloat()可以将一个字符串中的以数字开头的有效整数/浮点数内容取出然后转换成Number
      如果对非String使用会将其先转String再操作  parseInt(true)=>NaN

使用Boolean()函数
    - 数字--->布尔
        除了0和NaN，其余都是true
    - 字符串--->布尔
        除了空串，其余都是true
    - null和undefined都是false
    - 对象也会转true
    - 为任意的数据类型做两次非运算，即可将其转换为布尔值
        let a = "hello"
        a = !!a => true

typeof运算符用来获取一个值的类型，并将该值类型以字符串的形式返回
    - number string boolean undefined object

算数运算符
    - 当对非Number类型的值进行运算时，会将这些值转换成number再运算
    - 任何值和NaN进行运算都是NaN
    - 任何值和字符串做加法运算，都会先转换为字符串，然后再和字符串做拼串
    - 除了加法运算外，所有值和数字做运算都会先转成数字再运算
    - 无论是a++还是++a，都会立即使原变量的值自增1
    - 不同的是a++的值等于原变量的值，++a的值等于新值
      
16进制以0x开头  0x10、0xff、0xCafe
8进制以0开头    070
2进制以0b开头   ob10
像"070"这种字符串，有些浏览器会当成8进制解析，有些会当成10进制解析
可以在parseInt传递第二个参数来指定数字的进制


-S -> 生产依赖
-D -> 开发依赖

----------------------------------------------------------------------------------

function throttle(fn, delay) {
    let lastTime = 0
    return function () {
        let nowTime = Date.now()
        if (nowTime - lastTime > delay) {
            fn.call(this)
            lastTime = nowTime
        }
    }
}

function debounce(fn, delay) {
    let timer = null
    return function () {
        clearTimeOut(timer)
        timer = setTimeOut(function(){
            fn.aplly(this)
        }, delay)
    }
}

一个url到最终页面渲染完成，发生了什么？
1、DNS解析：将域名解析为ip地址
    - 浏览器DNS缓存
    - 系统DNS缓存
    - 路由器DNS缓存
    - 网络运营商DNS缓存
    - 递归搜索： blog.baidu.com
        - .com域名下查找DNS解析
        - .baidu域名下查找DNS解析
        - .blog域名下查找DNS解析
        - 出错了

2、TCP连接：TCP三次握手
    - 第一次握手，浏览器发起，告诉服务器我要发送请求了
    - 第二次握手，服务器发起，告诉浏览器我准备接受了，你赶紧发送吧
    - 第三次握手，浏览器发起，告诉服务器，我马上就发了，准备接受吧

3、发送请求
    - 请求报文：HTTP协议的通信内容

4、接受响应
    - 响应报文

5、渲染页面
    - 遇见HTML标记，调用HTML解析器解析成Token并构建DOM树
    - 遇见style/link标记，调用css解析器，处理css并构建cssom树
    - 遇见script标记，调用javaScript解析器，处理script代码（绑定事件，修改dom树/cssom树）
    - 将dom树和cssom树合并成一个渲染树
    - 根据渲染树来计算布局，计算每个节点的几何信息（布局）
    - 将各个节点颜色回执到屏幕上（渲染）

    注意：
        这五个步骤不一定按照顺序执行，如果dom树或cssom树被修改了，可能会执行多次布局和渲染
        旺旺实际页面中，这些步骤都会执行多次

6、断开连接：TCP四次挥手
    - 第一次挥手，浏览器发起，发送给服务器，我东西发送完了（请求报文），你准备关闭吧
    - 第二次挥手，服务器发起，告诉浏览器，我东西接受完了（请求报文），我准备关闭了，你也准备吧
    - 第二次挥手，服务器发起，告诉 浏览器，我东西发送完了（响应报文），你准备关闭吧
    - 第四次挥手，浏览器发起，告诉服务器，我东西接受完了（响应报文），我准备关闭了，你也准备吧


什么是闭包？
    1、密闭的容器，类似于set、map容器，存储数据的
    2、闭包是一个对象，存放数据的格式：key：value

形成的条件：
    1、函数嵌套
    2、内部函数引用外部函数的局部变量

闭包的优点：延长外部函数局部变量的生命周期
闭包的缺点：容易造成内存泄漏

注意点：
    1、合理的使用闭包
    2、用完闭包要及时清除（销毁）

变量提升
js引擎在代码正是执行之前会做一个预处理的工作
    1、收集变量
    2、收集函数

执行上下文(execute context) EC
    理解：代码执行的环境
    时机：代码正式执行之前会进入到执行环境
    工作：
        1、创建变量对象：
            - 变量
            - 函数及函数的参数
            - 全局：window
            - 局部：抽象的但是确实存在
        2、确认this的指向
            - 全局：this--->window
            - 局部：this--->调用其的对象
        3、创建作用域链
            父级作用域链 + 当前的变量对象


宏任务
    分类：setTimeOut setInterval requestAnimationFrame
    1、宏任务所处的队列就是宏任务队列
    2、第一个宏任务队列中只有一个任务：执行主线程的js代码
    3、宏任务可以有多个

微任务
    分类：new Promise().then(回调) process.nextTick
    1、微任务所处的队列就是微任务队列
    2、只有一个微任务队列
    3、在上一个宏任务队列执行完毕后如果有微任务队列就会执行微任务队列中的所有任务


比较Vue和React
    相同点：
        1、都有组件化开发和virtual DOM
        2、都支持props进行父子组件间数据通信
        3、都支持数据驱动视图，不直接操作真实DOM，更新状态数据界面就自动更新
        4、都支持服务器渲染
        5、都有支持native的方案，React的React Native，Vue的Weex

    不同点：
        1、数据绑定：vue实现了数据的单项绑定（内存-界面，界面-内存），react数据流动是单向的（内存到界面的变化）
        2、组件写法不一样，react推荐JSX，也就是把HTML、CSS全都写进JavaScript；
           vue推荐的做法是webpack+vue-loader的单文件组件格式，即HTML、CSS、JS写在同一个文件
        3、state对象在react应用中不可变，需要使用setState方法更新状态
           在vue中state对象不是必须的，数据由data属性在vue对象中管理
        4、virtual DOM不一样，vue会跟踪每一个组件间的依赖关系，不需要重新渲染整个组件树
           而react每当应用的状态被改变是，全部组件都会重新渲染，所以react中会需要shouldcomponentupdate这个生命周期函数方法来进行控制
        5、react严格上只针对MVC的view层，vue则是MVVM模式


Redux
    1、redux是一个独立专门用于做状态管理的js库，不是react插件库
    2、它可以用在react、angular、vue等项目中，但基本与react配合使用
    3、作用：集中式管理react应用中多个组件共享的状态和从后台获取的数据

vue通信方式
    1、父-->子通信
    2、子-->父通信
    3、隔代组件间通信
    4、兄弟组件间通信

通信实现
    1、props
        - 通过一般属性实现父向子通信
        - 通过函数属性实现子向父通信
        - 缺点：隔代组件和兄弟组件间通信比较麻烦
    2、vue自定义事件
        - vue内置实现，可以代替函数类型的props
            a.绑定监听：<MyComp @eventName="callback"
            b.触发（分发）事件this.$emit("eventName", data)
        - 缺点：只适合父子间通信
    3、消息订阅与发布
        - 需要引入消息订阅与发布的实现库，如pubsub.js
            a.订阅消息：PubSub.subscribe('msg', (msg, data)=>{})
            b.发布消息：PubSub.publish('msg', data)
        - 优点：此方式可用于任意关系组件间通信
    4、vuex
        - vuex是vue官方提供的集中式管理vue多组件共享状态数据的vue插件
          集中式管理vue多个组件共享的状态和从后台获取的数据
        - 优点：对组件间关系没有限制，且相比于pubsub库管理更集中，更方便
    5、slot
        - 专门用来实现父向子传递带数据的标签
        - 注意：通信的标签模板是在父组件中解析好后再传递给子组件的


数组扁平化
let arr = [0,[1,2,3],[4,[5,[6,7],8]]]
function flattenArray(arr) {
    let _arr = []
    for (let i = 0; i < arr.length; i++) {
        //判断数组的方法
        if (!Array.isArray(arr[i])) {
            _arr.push(arr[i])
        } else {
            _arr = _arr.concat(flattenArray(arr[i]))
        }
    }
    return _arr
}
鸭式变形说的是从事物特征去判断它是什么
IE6\IE7判断是不是数组
function checkIsArray (o) {
    return Object.prototype.toString.call(o) == "[object Array]" && "push" in o
}       

函数curry化
function curry(fn) {
    return function () {
        let args = arguments
        return function () {
            return fn(...args, ...arguments)
        }
    }
}

function fun (a,b,c,d) {
    return a+b+c+d
}

let f = curry(fun)

----------------------------------------------------------------------------------

语言发展史
    机器语言——汇编语言——低级语言（面向过程）——高级语言（面向对象）——模块系统——框架——系统接口（API）

----------------------------------------------------------------------------------

md5——签名散列算法

----------------------------------------------------------------------------------

计算机与科学
    继电器——真空管——晶体管

    二进制
    10110111
    128 64 32 16 8 4 2 1
    128+32+16+4+2+1=183

    一字节=8位

    ASCII——美国信息交换标准代码
        发明于1963年，7位代码，足够存128个不同值
        字母、数字、特殊符号

----------------------------------------------------------------------------------

登陆验证码用机器学习，写个三层神经网络就可以

----------------------------------------------------------------------------------

拖拽上传
    事件
        ondragenter     拖着东西进入
        ondragleave     拖着东西离开
        ondragover      悬停
        ondragdrop      松手

----------------------------------------------------------------------------------

数据交互:
1、表单          最基本、最简单      http数据请求其实都是表单
2、ajax         不用刷新；ajax可以跨域；性能低、单向、跨域麻烦
3、jsonp        跨域；安全性太差；简单，有风险
4、websocket    性能高、双向（双工）、直接跨域

----------------------------------------------------------------------------------

ajax cors跨域
websocket
formdata

----------------------------------------------------------------------------------

ajax2.0
    - formdata:控制提交数据、文件上传
        set(key, value)     会覆盖
        append(key, value)  不会覆盖
        delete(key)
        get(key)
        getAll
        forEach

    - cors跨域
        不存在跨域这回事儿——实际上是浏览器的限制
        Access-Control-Allow-Origin: 域名 || *
        Access-Control-Allow-Headers: 'X-Test-Cors',
        Access-Control-Allow-Methods: 'PUT, POST, Delete',
        Access-Control-Max-Age: '1000'//1000秒之内不需要再发送预请求

        S端:验证headers['origin']认不认识
            认识=>setHeader('Access-Control-Allow-Origin', '*')

        C端:不需要做任何事

ajax1.0区别在于不会发送origin

----------------------------------------------------------------------------------

content-type
    text/plain                          纯文本
    application/x-www-form-urlencoded   &&&的方式
    multipart/form-data                 定界符分割各个数据（文件上传）

----------------------------------------------------------------------------------

restful不是接口、也不是标准，是一种风格、习惯

method      url
get         /user       登陆
post        /user       注册
delete      /user       注销

----------------------------------------------------------------------------------

fetch
    - 原生js提供的改进的ajax
    - 需要两次await
    - let res = await (await fetch(url)).json()

----------------------------------------------------------------------------------

http协议
    http     容易被攻击
    https    安全
    - http1.0   一次性连接
    - http1.1   保持连接    性能提升
    - http2.0   强制https、自带双向通信、多路复用

----------------------------------------------------------------------------------

OSI七层交换“参考”模型
1、物理层   物理学家、通信工程——材料、电压
2、链路层   内网寻址    ARP、ICMP
3、网络层   外网寻址    IP
4、传输层   通信稳定性  TCP
5、表现层   x 统一各个网络结构
6、会话层   x 记录状态
7、应用层   应用细节    HTTP、FTP、SMTP、POP3

五层模型
1、物理层
2、链路层
3、网络层
4、传输层
5、应用层

----------------------------------------------------------------------------------

TCP——传输控制协议   文件下载、聊天
1、保证到达
2、保证质量
3、保证顺序

UDP——用户数据报协议 对质量没有绝对要求、对延迟有很高要求    IP电话、视频直播
1、不保证到达
2、不保证质量
3、不保证顺序

----------------------------------------------------------------------------------

SVG
    特点:
        矢量，没有单位
        保存——事件、属性
        性能——一般

    1、SVG由标签组成——svg、line、rect、circle...
    虽然只是标签，但不是html标准

    2、属性——决定图形形状   样式——决定图形视觉效果
        *推荐放在样式里，因为属性的样式优先级太低，属性<*<class<ID<行间

    3、事件、修改
        添加事件    不变
        修改样式    不变
        属性操作    .setAttribute/.getAttribute

    4、图形：
        <line x1 y1 x2 y2>
        <rect x y width height rx ry>
        <circle cx cy r>
        <ellipse cx cy rx ry>

    5、样式
        stroke          边线颜色
        stroke-width    线宽
        fill            填充

    SVG和HTML——兄弟


----------------------------------------------------------------------------------

SQL > Structured Query Language(结构化查询语句)

----------------------------------------------------------------------------------

文档型数据库
mongoDB

关系型数据库
mysql
    增  INSERT
        INSERT INTO user_table (ID, name, age) VALUES(0, 'YANXL', 18)
        INSERT INTO user_table (ID, name, age) VALUES(),(),(),()
    删  DELETE
        DELETE FROM user_table WHERE ID=1
    改  UPDATE
        UPDATE user_table SET name='yanxl', age='10'  WHERE ID=1
    查  SELECT
        SELECT name, age FROM user_table WHERE ID=2

    子句顺序——WHERE>GROUP>ORDER>LIMIT

    WHERE——条件
        WHERE name='blue'
        WHERE age>=18
        WHERE age>=18 AND score<60
        WHERE age>=18 or score>60

    ORDER——排序
        ORDER BY age ASC/DESC   升序（从 小到大）／降序（从大到小）
        *price升序排列，如果price相同，再按sales降序排列
            ORDER BY price ASC, sales DESC

    GROUP——聚类-合并相同
        >SELECT * from student_table GROUP BY class
            合并班级
        >SELECT class,COUNT(class) FROM student_table GROUP BY class
            统计每个班人数
        >SELECT class,AVG(score) from student_table GROUP BY class
            统计平均分
        >SELECT class,MAX(score),MIN(score) from student_table GROUP BY class
            每个班级的最高分和最低分
        >SELECT name,SUM(price) from sales_table GROUP BY name
            统计每个人花费总额
        >SELECT name,SUM(price) from sales_table GROUP BY name ORDER BY SUM(price) DESC/ASC
            统计每个人花费总额,从高到低/从低到高
        
    LIMIT-限制输出
        LIMIT 10    前10条
        LIMIT 5,8   从第五条开始，要8条

        每页20条
            第一页  0,20    0~19
            第二页  20,20    20~39
            第三页  40,20    40~69
            第n页  (n-1)*20,20   

----------------------------------------------------------------------------------

express
    1、非nodeJS系统模块、node_modules模块引入需要加'./'
    2、
        res.send(any)
        res.sendFile(绝对路径名)
        res.sendStatus(writeHeader+write+end)
        res.redirect()

    3、post请求数据
    普通post——body-parser
    文件post——multer

    4、cookie
        ——存在浏览器、容量有限4k、不安全
        1、防篡改
        2、加密

        server.use(cookieParser([secret], {}))
        req.cookies——接收
        req.signedCookies——接收带签名的
        res.cookie(name, val, options)——发送

    5、session
        ——存在服务器、容量不用担心、安全

        session劫持
            sess_id拿走
            1、session定期更换ID——有效期
            2、签名

            server.use(cookieSession({
                key or secret
            }))

            req.session

----------------------------------------------------------------------------------

koa
    v1      generator
    v2      generator/async
    v3      async

    1、异步更简单——async
    2、
        (req, res, next)    express
        (ctx, next)         koa

        ctx.request
            ctx.request.method
            ctx.request.url
            ctx.request.header/headers

        ctx.response
            ctx.response.status = xxx   状态码
            ctx.response.body = xxx     返回内容

    3、强依赖router
        const router = require('koa-router')

        let r1 = router()
        app.use(r1.routes())

        r1.get('xxx', async)
        r1.post('xxx', async)
        r1.use('xxx', async)
        r1.delete('xxx', async)
        r1.put('xxx', async)
        ...

    4、静态资源
        koa-static  ❌
        koa-static-cache

        server.use(staticCache('url'))

    5、请求数据
        GET     ctx.request.query
            路由参数    ctx.params
        POST
            server.use(convert(betterBody({
                uploadDir: url,
                keepExtensions: boolean
            })))

            req.request.fields  数据+文件信息
            req.request.files   文件信息(全)

    6、cookie
        ctx.cookies.get(name)
        ctx.cookies.set(name, val, potions)
            options:
                maxAge      毫秒单位时间
                expires     Date对象
                path
                domain

    7、session
        ctx.session

    8、mysql-pro
        优点：
            事务支持
            防止注入
                SELECT * FROM xxx WHERE ID=?, [id]
        transaction  -   事务    -   要么都发生、要么都不发生
        ACID:
        A   原子性：要么都发生、要么都不发生
        C   持久性：只要事务提交了，它的作用就是永久
        I   隔离性：各个事务之间是独立
        D   一致性：事务前后的状态是一致的

        db.startTransaction()
        db.excuteTransaction(sql)
        db.stopTransaction()

----------------------------------------------------------------------------------

express     非破坏式    不依赖router
koa         破坏式      强依赖router    

express
    server.get('/', (req, res, next) => {})

koa1
    server.use(function *(ctx, next){})

koa3
    server.use(async (ctx, next) => {})

----------------------------------------------------------------------------------

路由——前端、后端
    定义：根据地址（url）不同，调用不同的代码
    1、创建
        let router = express.Router()

    2、给路由填东西
        router.get('/url', ()=>{})
        router.post('/url', ()=>{})
        router.use('/url', ()=>{})

    3、添加到父级
        server.use('/url', router)
        parentRouter.use('/url', router)

----------------------------------------------------------------------------------

/art/46657      优点：路由、利于SEO、SPA
/art/:a/:b/:c   参数都得有
req.params

/art?id=46657      优点：灵活
/art?a=xxx&c=xxx   参数可省略
req.query

----------------------------------------------------------------------------------

服务端渲染
    后端渲染： html生成出来     优点：稳定、安全、利于SEO

        pug 破坏式——破坏html
        1、缩进规定层级

        ejs 非破坏式——保留html结构
        1、输出
            转义输出    <%= %>
            非转义输出  <%- %>

    前端渲染： html生成出来     优点：体积更小、灵活、体验好
    浏览器渲染：输入url -> 加载 -> html,css,js.img,... -> 渲染（画）

----------------------------------------------------------------------------------

在网速不够好的情况下后台渲染页面加载速度更快
类似组装好的家具和未组装的木板

----------------------------------------------------------------------------------

模块化——所有语言（除js之外）都有模块系统

1、前端
    传统——requireJS-AMD、seaJS-CMD
        CMD——公共模块定义
            命名空间
        AMD——异步模块定义
            CMD+异步
    现代——vue、angular、react

2、后端
    Node模块系统
    exports.a       单独输出
    module.exports  全部输出

    ES6的import……from = require
        前端用webpack编译
        浏览器不支持这种语法、nodejs也不支持

----------------------------------------------------------------------------------

nodeJS
    1、服务器
        web服务器
        其他服务器 
    2、工具
        开发工具    webpack、vue-cli...
        爬虫
        专业工具

----------------------------------------------------------------------------------
工具：
    1、编译类——babel、grunt/gulp
        ES5 -> ES6
    2、打包类——browserify
        一堆文件 -> 单个文件
    3、开发辅助——browser-sync
        多端同步
    4、测试类
        单元测试：模块、函数
        集成测试：
        压力测试：性能、负载能力、隐藏bug

----------------------------------------------------------------------------------

webpack+插件
    - 打包、变异、测试、调试
    - 安装
        #webpack-cli    命令行工具
        cnpm i -g webpack

        #webpack        库
        npm i webpack
    - 编写基本配置
        默认：web pack.config.js
        改了:webpack --config xxx
        
        module.exports = {
            entry: '文件名',
            output: {
                path: '结果目录',
                filename: '结果文件名'
            },
        }

        多入口
            entry: {
                名字： 入口文件
                ...
            },
            output: {
                path: xxx,
                filename: '...[name]...'
            }

    - 带有dev-server的配置
        cnpm i webpack webpack-cli webpack-dev-server

        dev-server  开发服务器

    - loader    翻译
        babel-loader
            1、babel-loader     给webpack用的
            2、babel-core       babel核心库
            3、babel-preset-env 环境预设

        90%的loader
        module: {
            rules: [
                {test: 正则, use: loader}
            ]
        }


    ES6模块化——import／export
        export default xxx      作为模块本身被输出      import xxx from '...'
        export let a=12,b=5     输出模块的东西         import {a, b} from '...'

----------------------------------------------------------------------------------

nodeJS爬虫
    抓取数据——程序伪装成普通用户
    反爬、反抓取

    请求一个网页——http.request

----------------------------------------------------------------------------------

typescript
    微软出品
        补充js没有的特性——类型、抽象、接口
        严谨

    安装:
    >npm i -g typescript

    编译:
    >tsc xxx.ts     >=      xxx.js

    1、类型
        变量、参数、返回值

        指明类型
            显示声明    let a:string
            隐式声明    let a=12

        如果“让变量什么都能装”
            不给初始值
            显示声明any

        number/string/boolean/any
        (类型1|类型2|类型3)
        元组类型    [类型1,类型2]
        枚举——列举所有的可能性
        void类型——常用于返回值
        null/undefined
        never

        数组
            let a:number[] = [1,2,3]
            let a:Array<number> = [1,2,3]

    2、修饰符
        访问修饰符——public/private/protected
            public      任何人都能修改
            private     只有类内部才能访问
            protected   只有父类和子类才能访问

        访问修饰符怎么用
            “最小访问原则”、“属性都是private和protected，方法可以是public”

        修饰符
            static  静态成员——无需实例化即可调用
            const   只读成员——只读的，不能修改（类似java的final）

        存取器
            get/set      不支持es3/es4

        不支持函数重载

        注意：ts中类自带一个name

    3、抽象类、接口（推荐接口）
        abstract    抽象——继承      extends     只提供模版、自己不实现
        interface   接口——实现接口  implement    部分可以实现

        接口、抽象都是为了规范所有子类

    4、泛型
        let arr:string[] = []

----------------------------------------------------------------------------------

Angular     v1.x    v2.x    v3.x
Vue
React

MVVM

----------------------------------------------------------------------------------

MVC模式不是前端首创，java、php早十几年前就有

    各自负责各自的事，谁也不打扰谁
    M   Model-模型：数据
    V   View-视图：表现层
    C   Controller-控制器：业务逻辑

MVP
    c->p    隔离

MVVM
    p->vm   只把业务逻辑直接相关的代码留在p里面，把表现相关的代码放到视图层

    1、p得到了精简——只有业务逻辑
    2、视图相关的代码，最大限度重用

----------------------------------------------------------------------------------

vue好在哪儿
    分工明确
    工作效率高
    统一

改变
    不要直接操作DOM
    数据为中心——数据驱动

属性绑定
    v-bind:属性=“数据”
    :属性=”数据“

    :style="json"
    :class="arr"
    json: {
        width: '300px',
        height: '200px',
        'font-size': '40px'
    }
    arr: ['aaa', 'bbb']

vuex
    - 状态统一管理
    - 组件间同步通信
    - 数据交互

    1、state——状态
        全局唯一
        module

    2、getter
        获取状态

    3、mutation
        修改状态操作

    4、action（相当于setter）
        提交mutation

    5、modules

    - 创建
        const store = new Vue.Store({
            strict: true,
            state: {},
            mutations: {},
            actions: {},
            getters: {}
        })

    - 注册
        Vue.use(Vuex)
        new Vue({
            ...
            store
        })

    - 组件里使用
        this.$store.dispatch('action名字', 参数)

    组件 dispatch -> action commit -> mutation state.xx -> state

    手动出发action              适合异步、其它异步操作
    如果getters是异步会很麻烦     适合同步、数据交互

